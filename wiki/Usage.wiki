# usage page of pypi2pkgsys

= Usage of pypi2pkgsys =

pypi2pkgsys provide there commands: pypi2portage, pypi2dpkg and pypi2rpm.
Now only pypi2portage is worked.

== Setup ==

Because the ebuilds generated by pypi2pkgsys is not a part of the official
portage, so PORTDIR_OVERLAY must be set. The default position which used by
pypi2portage is '/usr/local/portage'. So '/usr/local/portage' should be added
into 'PORTDIR_OVERLAY' in '/etc/make.conf'. If you prefer some other places,
just add it and assign it in command line.

/etc/pypi2pkgsys/index.ini can be used to save the user defined configurations.
The sections provided in the /etc/pypi2pkgsys/index.ini will overlay the
same named sections provided with the pypi2pkgsys. The patches provided by
user should be placed in /etc/pypi2pkgsys/ too.

Because there are many broken packages in PyPI, even easy_install can not
access them, I can not access them too. To avoid repeat failed in these
packages, log is very important of us. All passed and failed packages are
recorded there. By read the content of the log, we known why the packages
can not be processed. Statistices is provided by pypi-logstats.py too.
In gentoo, the log is located in /var/tmp/pypi/pypi2pkgsys.log by default.
You can copy pypi2pkgsys provided pypi2pkgsys.log in pypi2pkgsys/patches to
/var/tmp/pypi/pypi2pkgsys.log as its start point, so you can utilize the
test from me.

Except to modify the distributed packages by patch, fixsetup.py in the package
root directory is executed if present, which can be used to move, copy files
in easier way.

Because there are some big package files, such as basemap-0.99.1.tar.gz (97M),
and not any package files are provided by some packages, I setup the support
of PyPI in the local machine to avoid download them again and again, or do not
have to link to unlinkable site again and again. These network actions are
main block of my work.

We have to provide a set of different options for PyPI update or local update,
so I implement scheme support in pypi2pkgsys. User can choose a group of
prepared options from configuration files with just one command line option.
Now two schemes, 'scheme-gentoo' and 'scheme-gentoo-local', are provided.
The first scheme is used to update, download from pypi.python.org directly,
and the downloaded files will be saved in cache. After that, the downloaded
packages can be accessed from localhost cache by using the second scheme.

A default scheme is provided for each package system, the default values of
options are loaded from it.

== Command line ==

Possible options for all of the three commands:
 * --scheme-*: Choose the specified scheme.
 * --url: The url of the PyPI index.
 * --cache-root: The root directory of the local cache. If it is set to '', cache is disabled.
 * --cache-url: The access url of the local cache.
 * --unpack-dir: Where to unpack the downloaded package files.
 * --download-dir: Where to save the downloaded package files. When --cache-root is not '', this option is forced to be subdirectory 'downloads' of --cache-root.
 * --log-path: The path of the log file. If it is set to '', log is disabled. You can copy pypi2pkgsys.log from pypi2pkgsys/patches/pypi2pkgsys.log as its start content. pypi2portage will updated it automatically.
 * --skip-broken: Whether to skip the packages which broken is detected.
 * --deps: Whether to generate the depended packages.

The options which is valid in pypi2portage only:
 * --portage-distfiles: The directory used by portage to save its package files, the default value is: /usr/portage/distfiles.
 * --portage-dir: The portage overlay directory which should be used by pypi2pkgsys. The default value is: /usr/local/portage.

After the options, the required packages are listed. wildcards are permitted,
pypi2pkgsys will access to PyPI index and find all packages which match the
wildcards. Version specification, such as >= 0.1, can be used too.

The execution of the pypi2portage require root privilege because it has to
write in /var/tmp/pypi, /usr/local/portage, /usr/portage/distfiles.

If the requested ebuilds are generated successfully, you can emerge them.

== Examples ==
{{{
# pypi2portage Pylons
# emerge pylons
}}}
Scan all packages which are started by 'A' or 'a'.
{{{
# pypi2portage [Aa]*
}}}
Generate ebuild from localhost cache.
{{{
# pypi2portage --scheme-local basemap athenaCL 
}}}
